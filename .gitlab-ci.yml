stages:
    - quality_tests
    - specifications
    - frontend
    - unit_tests
    - functional_tests
    - performances_tests
    - deployment

quality_tests:
    stage: quality_tests
    image: php:fpm
    before_script:
        - curl -o insight.phar -s http://get.insight.sensiolabs.com/insight.phar
    script:
        - php insight.phar analyze --no-interaction --no-ansi $INSIGHT_PROJECT_ID --reference=$CI_COMMIT_SHA --user-uuid="$INSIGHT_USER_UID" --api-token="$INSIGHT_USER_TOKEN"
    only:
        - master

phpspec:
    stage: specifications
    image: php:7.2-fpm-alpine3.7
    services:
        - redis
    before_script:
        - set -xe \
          	&& apk add --no-cache --virtual .build-deps \
          		$PHPIZE_DEPS \
          		icu-dev \
          		postgresql-dev \
          		zlib-dev \
          	&& docker-php-ext-install \
          		intl \
          		pdo_pgsql \
          		zip \
          	&& pecl install \
          		apcu-${APCU_VERSION} \
          	&& docker-php-ext-enable --ini-name 20-apcu.ini apcu \
          	&& docker-php-ext-enable --ini-name 05-opcache.ini opcache \
          	&& runDeps="$( \
          		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \
          			| tr ',' '\n' \
          			| sort -u \
          			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
          	)" \
          	&& apk add --no-cache --virtual .php-phpexts-rundeps $runDeps \
          	&& apk del .build-deps
        - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        - php composer-setup.php
        - php -r "unlink('composer-setup.php');"
        - rm -rf vendor/*
        - rm -rf var/cache/*
        - php composer.phar global require "hirak/prestissimo:^0.3" --prefer-dist --no-progress --no-suggest --classmap-authoritative
        - php composer.phar install --optimize-autoloader --classmap-authoritative
        - php composer.phar dump-autoload --optimize --classmap-authoritative
        - cp docker/gitlab/.env.gitlab.dist ./.env
        - cp docker/gitlab/.env.gitlab.dist ./.env.behat
    script:
        - ./bin/console d:d:c --env=test
        - ./bin/console d:s:c --env=test
        - vendor/bin/phpspec run
        - rm -rf var/data.db
    cache:
        paths:
            - vendor/

phpunit:
    stage: unit_tests
    image: php:7.1-fpm
    services:
        - redis
    before_script:
        - apt-get update -y
        - apt-get install -y libssl-dev
        - pecl install apcu xdebug
        - apt-get install -y libpq-dev
        - docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql
        - docker-php-ext-install pdo_mysql opcache json pdo_pgsql pgsql
        - docker-php-ext-enable apcu xdebug
        - apt-get install zip unzip git -y
        - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        - php composer-setup.php
        - php -r "unlink('composer-setup.php');"
        - rm -rf vendor/*
        - rm -rf var/cache/*
        - php composer.phar install --optimize-autoloader --classmap-authoritative
        - php composer.phar dump-autoload --optimize --classmap-authoritative
        - cp docker/gitlab/.env.gitlab.dist ./.env
        - cp docker/gitlab/.env.gitlab.dist ./.env.behat
        - mkdir -p ./config/credentials/google/bucket
        - echo $GCP_BUCKET_SERVICE_CREDENTIALS > ./config/credentials/google/bucket/credentials.json
        - mkdir -p ./config/credentials/google/vision
        - echo $GCP_MACHINE_LEARNING_SERVICE_CREDENTIALS > ./config/credentials/google/vision/credentials.json
        - cp phpunit.xml.dist phpunit.xml
    script:
        - ./bin/console d:d:c --env=test
        - ./bin/console d:s:c --env=test
        - vendor/bin/phpunit -v
        - rm -rf var/data.db
    cache:
        paths:
            - vendor/

behat_web:
    stage: functional_tests
    image: php:7.1-fpm
    services:
        - redis
        - node
    before_script:
        - apt-get update -y
        - apt-get install -y libssl-dev
        - pecl install apcu xdebug
        - apt-get install -y libpq-dev
        - docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql
        - docker-php-ext-install pdo_mysql opcache json pdo_pgsql pgsql
        - docker-php-ext-enable apcu xdebug
        - apt-get install zip unzip git -y
        - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        - php composer-setup.php
        - php -r "unlink('composer-setup.php');"
        - rm -rf vendor/*
        - rm -rf var/cache/*
        - php composer.phar install --optimize-autoloader --classmap-authoritative
        - php composer.phar dump-autoload --optimize --classmap-authoritative
        - cp docker/gitlab/.env.gitlab.dist ./.env
        - cp docker/gitlab/.env.gitlab.dist ./.env.behat
        - mkdir -p ./config/credentials/google/bucket
        - echo $GCP_BUCKET_SERVICE_CREDENTIALS > ./config/credentials/google/bucket/credentials.json
        - mkdir -p ./config/credentials/google/vision
        - echo $GCP_MACHINE_LEARNING_SERVICE_CREDENTIALS > ./config/credentials/google/vision/credentials.json
    script:
        - ./bin/console d:d:c --env=test
        - ./bin/console d:s:c --env=test
        - vendor/bin/behat
        - rm -rf var/data.db
    cache:
        paths:
            - vendor/

performances:
    stage: performances_tests
    script:
        - echo 'Hello World'
