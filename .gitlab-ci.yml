stages:
    - php7.1
    - php7.2
    - quality_tests
    - frontend
    - specifications
    - unit_tests
    - functional_tests
    - performances_tests
    - pre-production
    - deployment

sass:
    stage: frontend
    image: node
    before_script:
        - yarn install
    script:
        - ./node_modules/.bin/encore production
    cache:
        paths:
            - node_modules/
            - public/build/

deptrac:
    stage: php7.1
    image: php:7.1-fpm-alpine
    services:
        - redis
    before_script:
        - set -xe \
          	&& apk add --no-cache --virtual .build-deps \
          		$PHPIZE_DEPS \
          		icu-dev \
          		postgresql-dev \
          		zlib-dev \
          		graphviz \
          	&& docker-php-ext-install \
          		intl \
          		pdo_pgsql \
          		zip \
          	&& pecl install \
          		apcu \
          	&& docker-php-ext-enable apcu opcache \
          	&& runDeps="$( \
          		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \
          			| tr ',' '\n' \
          			| sort -u \
          			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
          	)" \
          	&& apk add --no-cache --virtual .php-phpexts-rundeps $runDeps \
          	&& apk del .build-deps
        - cp docker/php/conf/production/php.ini /usr/local/etc/php/php.ini
        - curl -LS http://get.sensiolabs.de/deptrac.phar -o deptrac.phar
        - chmod +x deptrac.phar
        - mv deptrac.phar /usr/local/bin/deptrac
        - apk add --no-cache graphviz
        - cp docker/gitlab/.env.gitlab.dist ./.env
        - cp docker/gitlab/.env.gitlab.dist ./.env.behat
    script:
        - deptrac -v

deptrac:
    stage: php7.2
    image: php:7.2-fpm-alpine3.7
    services:
        - redis
    before_script:
        - set -xe \
          	&& apk add --no-cache --virtual .build-deps \
          		$PHPIZE_DEPS \
          		icu-dev \
          		postgresql-dev \
          		zlib-dev \
          		graphviz \
          	&& docker-php-ext-install \
          		intl \
          		pdo_pgsql \
          		zip \
          	&& pecl install \
          		apcu \
          	&& docker-php-ext-enable apcu opcache \
          	&& runDeps="$( \
          		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \
          			| tr ',' '\n' \
          			| sort -u \
          			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
          	)" \
          	&& apk add --no-cache --virtual .php-phpexts-rundeps $runDeps \
          	&& apk del .build-deps
        - cp docker/php/conf/production/php.ini /usr/local/etc/php/php.ini
        - curl -LS http://get.sensiolabs.de/deptrac.phar -o deptrac.phar
        - chmod +x deptrac.phar
        - mv deptrac.phar /usr/local/bin/deptrac
        - apk add --no-cache graphviz
        - cp docker/gitlab/.env.gitlab.dist ./.env
        - cp docker/gitlab/.env.gitlab.dist ./.env.behat
    script:
        - deptrac -v

phpunit:
    stage: php7.2
    image: php:7.2-fpm-alpine3.7
    services:
        - redis
    before_script:
        - set -xe \
          	&& apk add --no-cache --virtual .build-deps \
          		$PHPIZE_DEPS \
          		icu-dev \
          		postgresql-dev \
          		zlib-dev \
          		graphviz \
          	&& docker-php-ext-install \
          		intl \
          		pdo_pgsql \
          		zip \
          	&& pecl install \
          		apcu \
          	&& docker-php-ext-enable apcu opcache \
          	&& runDeps="$( \
          		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \
          			| tr ',' '\n' \
          			| sort -u \
          			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
          	)" \
          	&& apk add --no-cache --virtual .php-phpexts-rundeps $runDeps \
          	&& apk del .build-deps
        - cp docker/php/conf/production/php.ini /usr/local/etc/php/php.ini
        - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        - php composer-setup.php
        - php -r "unlink('composer-setup.php');"
        - rm -rf vendor/*
        - rm -rf var/cache/*
        - php composer.phar global require "hirak/prestissimo:^0.3" --prefer-dist --no-progress --no-suggest --classmap-authoritative
        - php composer.phar install --optimize-autoloader --classmap-authoritative
        - php composer.phar dump-autoload --optimize --classmap-authoritative
        - cp docker/gitlab/.env.gitlab.dist ./.env
        - cp docker/gitlab/.env.gitlab.dist ./.env.behat
        - mkdir -p ./config/credentials/google/bucket
        - echo $GCP_BUCKET_SERVICE_CREDENTIALS > ./config/credentials/google/bucket/credentials.json
        - mkdir -p ./config/credentials/google/vision
        - echo $GCP_MACHINE_LEARNING_SERVICE_CREDENTIALS > ./config/credentials/google/vision/credentials.json
        - cp docker/gitlab/phpunit.xml.gitlab.dist phpunit.xml
    script:
        - ./bin/console d:d:c --env=test
        - ./bin/console d:s:c --env=test
        - ./bin/console d:f:l -n --env=test
        - vendor/bin/phpunit -v
        - rm -rf var/data.db
    cache:
        paths:
            - vendor

behat_web:
    stage: functional_tests
    image: php:7.2-fpm-alpine3.7
    services:
        - redis
        - node
    before_script:
        - set -xe \
          	&& apk add --no-cache --virtual .build-deps \
          		$PHPIZE_DEPS \
          		icu-dev \
          		postgresql-dev \
          		zlib-dev \
          		graphviz \
          	&& docker-php-ext-install \
          		intl \
          		pdo_pgsql \
          		zip \
          	&& pecl install \
          		apcu \
          	&& docker-php-ext-enable apcu opcache \
          	&& runDeps="$( \
          		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \
          			| tr ',' '\n' \
          			| sort -u \
          			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
          	)" \
          	&& apk add --no-cache --virtual .php-phpexts-rundeps $runDeps \
          	&& apk del .build-deps
        - cp docker/php/conf/production/php.ini /usr/local/etc/php/php.ini
        - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        - php composer-setup.php
        - php -r "unlink('composer-setup.php');"
        - php composer.phar global require "hirak/prestissimo:^0.3" --prefer-dist --no-progress --no-suggest --classmap-authoritative
        - rm -rf vendor/*
        - rm -rf var/cache/*
        - php composer.phar install --optimize-autoloader --classmap-authoritative
        - php composer.phar dump-autoload --optimize --classmap-authoritative
        - cp docker/gitlab/.env.gitlab.dist ./.env
        - cp docker/gitlab/.env.gitlab.dist ./.env.behat
        - mkdir -p ./config/credentials/google/bucket
        - echo $GCP_BUCKET_SERVICE_CREDENTIALS > ./config/credentials/google/bucket/credentials.json
        - mkdir -p ./config/credentials/google/vision
        - echo $GCP_MACHINE_LEARNING_SERVICE_CREDENTIALS > ./config/credentials/google/vision/credentials.json
    script:
        - ./bin/console d:d:c --env=test
        - ./bin/console d:s:c --env=test
        - ./bin/console d:f:l -n --env=test
        - vendor/bin/behat
        - rm -rf var/data.db
    cache:
        paths:
            - vendor

cluster_deployment:
    stage: deployment
    image: google/cloud-sdk
    before_script:
        - echo $GCP_KUBERNETES_SERVICE_CREDENTIALS > /tmp/gcp_key.json
        - gcloud config set project $GCP_PROJECT_NAME
        - gcloud auth activate-service-account --key-file /tmp/gcp_key.json
        - gcloud container clusters get-credentials $GCK_CLUSTER_NAME --zone $GCK_CLUSTER_ZONE --project $GCP_PROJECT_NAME
    script:
        - kubectl apply -f redis-master-deployment.yaml
        - kubectl apply -f redis-master-service.yaml
        - kubectl get services
    only:
        - master
